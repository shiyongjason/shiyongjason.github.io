<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sky的Hexo博客园</title>
  
  <subtitle>^ω^,年轻的季节里提升自己</subtitle>
  <link href="https://shiyongjason.github.io/atom.xml" rel="self"/>
  
  <link href="https://shiyongjason.github.io/"/>
  <updated>2023-04-25T05:51:45.412Z</updated>
  <id>https://shiyongjason.github.io/</id>
  
  <author>
    <name>Sky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack</title>
    <link href="https://shiyongjason.github.io/2023/04/25/webpack/"/>
    <id>https://shiyongjason.github.io/2023/04/25/webpack/</id>
    <published>2023-04-25T05:45:13.000Z</published>
    <updated>2023-04-25T05:51:45.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1：-常见配置"><a href="#1：-常见配置" class="headerlink" title="1： 常见配置"></a>1： 常见配置</h2><p> 1、文件打包的出口和入库<br> 2、webpack如何开启一台服务<br> 3、webpack如何打包图片，静态资源等<br> 4、</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br><span class="line">(开发 生产不要下载)</span><br></pre></td></tr></table></figure><p><img src="/img/webpack1.png" alt="image"></p><ul><li>入口文件 src&#x2F;</li><li>出口 dist&#x2F;</li></ul><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><ul><li>scripts</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">&quot;build&quot;: &quot;webpack&quot;,</span><br><span class="line">&quot;watch&quot;: &quot;webpack --watch&quot;,</span><br><span class="line">&quot;dev&quot;: &quot;webpack-dev-server&quot;</span><br></pre></td></tr></table></figure><h2 id="webpack-配置-入-出口"><a href="#webpack-配置-入-出口" class="headerlink" title="webpack 配置 入 出口"></a>webpack 配置 入 出口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  entry : &#x27;./src/index.js&#x27;  // 配置打包入口文件</span><br><span class="line">  output : &#123; // 配置打包完成的出口文件 路径 </span><br><span class="line">    path : path.resolve(__dirname , &#x27;./dist/&#x27;),</span><br><span class="line">    filename : &#x27;building.js&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化输出的文件名称，为了缓存 hash，自动引入到html 里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D html-webpack-plugin</span><br></pre></td></tr></table></figure><h4 id="多入口文件"><a href="#多入口文件" class="headerlink" title="多入口文件"></a>多入口文件</h4><blockquote><p>多入口文件如何开发</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">plugins:[</span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        template:path.resolve(__dirname,&#x27;../public/index.html&#x27;),</span><br><span class="line">        filename:&#x27;index.html&#x27;,</span><br><span class="line">        chunks:[&#x27;main&#x27;] // 与入口文件对应的模块名</span><br><span class="line">      &#125;),</span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        template:path.resolve(__dirname,&#x27;../public/header.html&#x27;),</span><br><span class="line">        filename:&#x27;header.html&#x27;,</span><br><span class="line">        chunks:[&#x27;header&#x27;] // 与入口文件对应的模块名</span><br><span class="line">      &#125;),</span><br><span class="line">    ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如图<br><img src="/img/webpack2.png" alt="image"></p><blockquote><p>每次执行npm run build 会发现dist文件夹里会残留上次打包的文件，这里我们推荐一个plugin来帮我们在打包输出前清空文件夹clean-webpack-plugin, </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const &#123;CleanWebpackPlugin&#125; = require(&#x27;clean-webpack-plugin&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="css-解析"><a href="#css-解析" class="headerlink" title="css 解析"></a>css 解析</h4><blockquote><p>要一些loader来解析我们的css文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i -D style-loader css-loader</span><br><span class="line">或者</span><br><span class="line">npm i -D less less-loader</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/webpack22.png" alt="image"><br><img src="/img/webpack222.png" alt="image"></p><blockquote><p>实现css3代码自动补全，也可以运用到sass、less</p></blockquote><p>1、 display: flex;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br></pre></td></tr></table></figure><blockquote><p>这时候我们发现css通过style标签的方式添加到了html文件中，但是如果样式文件很多，全部添加到html中，难免显得混乱。这时候我们想用把css拆分出来用外链的形式引入css文件怎么做呢？</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D mini-css-extract-plugin</span><br></pre></td></tr></table></figure><p>图片</p><blockquote><p>拆分多个css 【mini-css-extract-plugin会将所有的css样式合并为一个css文件】</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--npm i -D extract-text-webpack-plugin@next--&gt;</span><br></pre></td></tr></table></figure><p>如图<br><img src="/img/webpack3.png" alt="image"></p><h4 id="打包-图片、字体、媒体、等文件"><a href="#打包-图片、字体、媒体、等文件" class="headerlink" title="打包 图片、字体、媒体、等文件"></a>打包 图片、字体、媒体、等文件</h4><p>1、file-loader<br>2、url-loader</p><p>如图<br><img src="/img/webpack4.png" alt="image"></p><h4 id="babel-转义-js"><a href="#babel-转义-js" class="headerlink" title="babel 转义 js"></a>babel 转义 js</h4><blockquote><p>为了使我们的js代码兼容更多的环境我们需要安装依赖</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D babel-loader @babel/preset-env @babel/core</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// webpack.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // 省略其它配置 ...</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">          &#123;</span><br><span class="line">            test:/\.js$/,</span><br><span class="line">            use:&#123;</span><br><span class="line">              loader:&#x27;babel-loader&#x27;,</span><br><span class="line">              options:&#123;</span><br><span class="line">                presets:[&#x27;@babel/preset-env&#x27;]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            exclude:/node_modules/</span><br><span class="line">          &#125;,</span><br><span class="line">       ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图<br><img src="/img/webpack5.png" alt="image"></p><p>es6&#x2F;7&#x2F;8 语法转成es5，但是对新api并不会转换 例如(promise、Generator、Set、Maps、Proxy等)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @babel/polyfill</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1：-常见配置&quot;&gt;&lt;a href=&quot;#1：-常见配置&quot; class=&quot;headerlink&quot; title=&quot;1： 常见配置&quot;&gt;&lt;/a&gt;1： 常见配置&lt;/h2&gt;&lt;p&gt; 1、文件打包的出口和入库&lt;br&gt; 2、webpack如何开启一台服务&lt;br&gt; 3、webpack如</summary>
      
    
    
    
    
    <category term="webpack" scheme="https://shiyongjason.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>map or set</title>
    <link href="https://shiyongjason.github.io/2023/04/04/map-or-set/"/>
    <id>https://shiyongjason.github.io/2023/04/04/map-or-set/</id>
    <published>2023-04-04T02:20:28.000Z</published>
    <updated>2023-04-04T08:49:34.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map本身是一个构造函数<br>1、Map是一组键值对的结构，具有极快的查找速度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var m = new Map([[&#x27;Michael&#x27;, 95], [&#x27;Bob&#x27;, 75], [&#x27;Tracy&#x27;, 85]]);</span><br><span class="line"></span><br><span class="line">m.get(&#x27;Michael&#x27;); // 95</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于初始化 一个  new Map  空的  常用 api</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var m = new Map(); // 空Map</span><br><span class="line"></span><br><span class="line">m.set(&#x27;Adam&#x27;, 67); // 添加新的key-value</span><br><span class="line"></span><br><span class="line">m.set(&#x27;Bob&#x27;, 59);</span><br><span class="line"></span><br><span class="line">m.has(&#x27;Adam&#x27;); // 是否存在key &#x27;Adam&#x27;: true</span><br><span class="line"></span><br><span class="line">m.get(&#x27;Adam&#x27;); // 67   Adam 对应value</span><br><span class="line"></span><br><span class="line">m.delete(&#x27;Adam&#x27;); // 删除key &#x27;Adam&#x27;</span><br><span class="line"></span><br><span class="line">m.get(&#x27;Adam&#x27;); // undefined</span><br></pre></td></tr></table></figure><p>** 由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var m = new Map();</span><br><span class="line"></span><br><span class="line">m.set(&#x27;Adam&#x27;, 67);</span><br><span class="line"></span><br><span class="line">m.set(&#x27;Adam&#x27;, 88);</span><br><span class="line"></span><br><span class="line">m.get(&#x27;Adam&#x27;); // 88</span><br></pre></td></tr></table></figure><p>使用 for..of 方法迭代 Map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var myMap = new Map();</span><br><span class="line">myMap.set(0, &quot;zero&quot;);</span><br><span class="line">myMap.set(1, &quot;one&quot;);</span><br><span class="line">for (var [key, value] of myMap) &#123;</span><br><span class="line">  console.log(key + &quot; = &quot; + value);</span><br><span class="line">&#125;</span><br><span class="line">// 将会显示两个log。一个是&quot;0 = zero&quot;另一个是&quot;1 = one&quot;</span><br><span class="line"></span><br><span class="line">for (var key of myMap.keys()) &#123;</span><br><span class="line">  console.log(key);</span><br><span class="line">&#125;</span><br><span class="line">// 将会显示两个log。 一个是 &quot;0&quot; 另一个是 &quot;1&quot;</span><br><span class="line"></span><br><span class="line">for (var value of myMap.values()) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 将会显示两个log。 一个是 &quot;zero&quot; 另一个是 &quot;one&quot;</span><br><span class="line"></span><br><span class="line">for (var [key, value] of myMap.entries()) &#123;</span><br><span class="line">  console.log(key + &quot; = &quot; + value);</span><br><span class="line">&#125;</span><br><span class="line">// 将会显示两个log。 一个是 &quot;0 = zero&quot; 另一个是 &quot;1 = one&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用  forEach  迭代 Map</p><p>json转map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let json = &#123;&quot;name&quot;:&quot;ES6&quot;,&quot;day&quot;:&quot;2014&quot;,&quot;feature&quot;:&quot;新特性&quot;&#125;;</span><br><span class="line">//json 2 map</span><br><span class="line">let map = new Map();</span><br><span class="line">for(let i in json)&#123;</span><br><span class="line">map.set(i,json[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>map转json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//map 2 json</span><br><span class="line">let map = new Map();</span><br><span class="line">map.set(&quot;name&quot;,&quot;ES6&quot;);</span><br><span class="line">map.set(&quot;day&quot;,&quot;2014&quot;);</span><br><span class="line">map.set(&quot;feature&quot;,&quot;新特性&quot;);</span><br><span class="line">let json = &#123;&#125;;</span><br><span class="line">for(let [k,v] of map)&#123;</span><br><span class="line">json[k]=v;</span><br><span class="line">&#125;</span><br><span class="line">console.log(json);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h2&gt;&lt;p&gt;Map本身是一个构造函数&lt;br&gt;1、Map是一组键值对的结构，具有极快的查找速度。&lt;/p&gt;
&lt;figure class=&quot;highl</summary>
      
    
    
    
    
    <category term="map  set" scheme="https://shiyongjason.github.io/tags/map-set/"/>
    
  </entry>
  
  <entry>
    <title>数据没有 只能重新搞一份</title>
    <link href="https://shiyongjason.github.io/2023/01/11/hello-world/"/>
    <id>https://shiyongjason.github.io/2023/01/11/hello-world/</id>
    <published>2023-01-11T07:55:00.146Z</published>
    <updated>2023-01-11T07:55:00.147Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>图片水印生成</title>
    <link href="https://shiyongjason.github.io/2023/01/11/%E5%9B%BE%E7%89%87%E6%B0%B4%E5%8D%B0%E7%94%9F%E6%88%90/"/>
    <id>https://shiyongjason.github.io/2023/01/11/%E5%9B%BE%E7%89%87%E6%B0%B4%E5%8D%B0%E7%94%9F%E6%88%90/</id>
    <published>2023-01-11T07:16:39.000Z</published>
    <updated>2023-01-11T07:55:00.148Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>近期项目需要做一个 定位打卡，拍照加上水印的功能，项目是用的react+Ant mobile</p></blockquote><p>  选用了 ImagePicker 图片选择器，代码如下</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ImagePicker</span><br><span class="line">    length={4}</span><br><span class="line">    disableDelete={true}</span><br><span class="line">    files={this.state.attachmentUrl}</span><br><span class="line">    onChange={this.onChangeFiles}</span><br><span class="line">    onImageClick={(index, fs) =&gt; this.openViewer(index, fs)}</span><br><span class="line">    selectable={this.state.attachmentUrl.length &lt; 20}</span><br><span class="line">    multiple={this.state.multiple}</span><br><span class="line">    capture="camera"  // 只支持 相机拍照</span><br><span class="line">/&gt;</span><br></pre></td></tr></tbody></table><p>  在onChange 里面调用方法，就能上传图片显示了，这里不多说介绍，上传图片的原理都差不多。<br>接下来说下给图片加水印的操作，在激烈的碰撞中，发现可以通过用Canvas，给图片上水印(本次是通过后台接口生成的)，之后慢慢的预研了一波。</p><p><strong>前端图片加水印原理很简单，主要分为下面几步：</strong></p><ol><li>将需要添加水印的图片绘制到 canvas 上</li><li>将水印图片绘制到 canvas 上</li><li>将 canvas 的内容导出为图片</li></ol><h3 id="前期学习"><a href="#前期学习" class="headerlink" title="前期学习"></a><a href="#%E5%89%8D%E6%9C%9F%E5%AD%A6%E4%B9%A0" title="前期学习"></a>前期学习</h3><p> 使用canvas在前端实现图片水印合成</p><p>  1.在底图上加上想要的水印，核心代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123456789101112// 获取当前 canvas 的上下文环境，用来操作在 canvas 上绘制内容const ctx = canvas.getContext(&#x27;2d&#x27;)// 向 canvas 上绘制图片// image 为一个图片对象// x 为绘制图片的横向起始位置，y 为绘制图片的纵向起始位置// width 为要绘制在 canvas 上宽度， height 为高度// 该方法最多可接受 9 个参数，从而实现剪裁的效果，但是与本篇内容无关，感兴趣的小伙伴可以搜索该方法ctx.drawImage(image, x, y, width, height)// 将 canvas 上的内容导出为 base64 格式的字符串，导出后可以直接赋值给 Image 对象的 src 属性// 第一个参数为导出的图片格式，可接受第二个参数（小于或等于 1 的数，表示导出图片的压缩比率）canvas.toDataURL(&quot;image/png&quot;)context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);</span><br></pre></td></tr></table></figure><p><strong>drawImage接受参数示意</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>img</td><td>用来被绘制的图像、画布或视频</td></tr><tr><td>sx</td><td>可选。img被绘制区域的起始左上x坐标。</td></tr><tr><td>sy</td><td>可选。img被绘制区域的起始左上y坐标。</td></tr><tr><td>swidth</td><td>可选。img被绘制区域的宽度（如果没有后面的width或height参数，则可以伸展或缩小图像）。</td></tr><tr><td>sheight</td><td>可选。img被绘制区域的高度（如果没有后面的width或height参数，则可以伸展或缩小图像）。</td></tr><tr><td>x</td><td>画布上放置img的起始x坐标。</td></tr><tr><td>y</td><td>画布上放置img的起始y坐标。</td></tr><tr><td>width</td><td>可选。画布上放置img提供的宽度（可能会有图片剪裁效果）。</td></tr><tr><td>height</td><td>可选。画布上放置img提供的高度（可能会有图片剪裁效果）。</td></tr></tbody></table><blockquote><p>步骤</p></blockquote><p> 1、本地图片转成Base64<br> 在onChange 上传图片 直接获取到的对象包含了base64格式的图片数据，如图：<br><img src="/img/shuiyin1.png"></p><p> 2、使用H5 <code>FlieReader</code> 读取base64格式的图片数据，将图片数据赋值给image 对象  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const reader = new FileReader();</span><br><span class="line">       reader.readAsDataURL(files);</span><br><span class="line">       reader.onload = (e) =&gt; {</span><br><span class="line">           const img = document.createElement('img');</span><br><span class="line">           img.src = reader.result;</span><br><span class="line">           }</span><br></pre></td></tr></tbody></table><p> 3、调用canvas元素画布上下文对象的drawImage方法即可实现将img内容绘制到画布  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const canvas = document.createElement('canvas');</span><br><span class="line">  // 设置画布高宽</span><br><span class="line">  canvas.width = img.width</span><br><span class="line">  canvas.height = img.height</span><br><span class="line">  let ctx = canvas.getContext('2d')</span><br><span class="line">  ctx.drawImage(img, 0, 0)</span><br></pre></td></tr></tbody></table><blockquote><p><strong>drawImage</strong>这个方法可以传入多个参数（楼上已经述说过了），以定义绘制的图像的范围，这里传入的0, 0定义从图像左上角开始绘制，后面可以继续传入两个参数来定义图像的绘制终点，不过这里整个图片都要绘制到canvas，所以采用默认值即可。注意点：要设置画布的高宽，到时候图片需要平铺到整个画布上，不加 的话 大图会被裁剪掉。</p></blockquote><p> 4、在画布上添加水印并借助canvas的<code>toDataURL()</code>方法把我们的canvas画布转换成base64无损PNG地址，这里就可以按照canvas的Api进行水印的操作</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 设置填充字号和字体，样式</span><br><span class="line">   ctx.font = "24px 宋体"</span><br><span class="line">   ctx.fillStyle = "#FFC82C"</span><br><span class="line">   // 设置右对齐</span><br><span class="line">   ctx.textAlign = 'right'</span><br><span class="line">   // 在指定位置绘制文字，这里指定距离右下角20坐标的地方</span><br><span class="line">   ctx.fillText('HOSJOY', canvas.width - 20, canvas.height - 20)</span><br><span class="line">   canvas.toDataURL("image/png")</span><br></pre></td></tr></tbody></table><p> 5、Demo完整代码如下：  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">const reader = new FileReader();</span><br><span class="line">       reader.readAsDataURL(files);</span><br><span class="line">       reader.onload = (e) =&gt; {</span><br><span class="line">           const img = document.createElement('img');</span><br><span class="line">           img.src = reader.result;</span><br><span class="line">           const canvas = document.createElement('canvas');</span><br><span class="line">           // 如何获取图片高度 宽度</span><br><span class="line"></span><br><span class="line">           var size = 100;</span><br><span class="line">           img.onload = async () =&gt; {</span><br><span class="line">               console.log(22, img.width)</span><br><span class="line">               const ctx = canvas.getContext('2d');</span><br><span class="line">               canvas.width = img.width;</span><br><span class="line">               canvas.height = img.height;</span><br><span class="line">               ctx.drawImage(img, 0, 0);</span><br><span class="line">               // ctx.drawImage(img,  0, 0, size, size, 0,0, size, size); 图片水印</span><br><span class="line">               ctx.fillStyle = 'white';</span><br><span class="line">               ctx.textBaseline = 'middle';</span><br><span class="line">               ctx.font ="24px 宋体"</span><br><span class="line">               ctx.fillText('Hello HOSJOY', 20, 20);</span><br><span class="line">               // canvas.toBlob(resolve);</span><br><span class="line">               // this.setState({</span><br><span class="line">               //     attachmentUrl: this.state.attachmentUrl.concat({</span><br><span class="line">               //         url: canvas.toDataURL("image/png"),  // 生成base64的图片地址</span><br><span class="line">               //     })</span><br><span class="line">               // })</span><br><span class="line">               const fileNew = canvas.toDataURL("image/png")</span><br><span class="line">              /这里执行后台上传接口</span><br><span class="line">           }</span><br><span class="line">       }</span><br></pre></td></tr></tbody></table><p> 这样就完整地给图片添加了水印效果，下面看一下实际效果，最终结果：<br><img src="/img/shuiyin2.png"></p><blockquote><p>总结</p><blockquote><p>前端给一个图片做简单的水印，canvas提供的一些API其实很有用，前端利用canvas的drawImage()可以实现对图片进行压缩，不妨大家可以试试,既然已经看到了最后，就请你伸出有魔力的手指点个关注吧！谢谢啦</p></blockquote></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;近期项目需要做一个 定位打卡，拍照加上水印的功能，项目是用的react+Ant mobile&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  选用了 ImagePicker 图片选择器，代码如下&lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>postMessage</title>
    <link href="https://shiyongjason.github.io/2023/01/11/postMessage/"/>
    <id>https://shiyongjason.github.io/2023/01/11/postMessage/</id>
    <published>2023-01-11T07:14:34.000Z</published>
    <updated>2023-01-11T07:55:00.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue内嵌iframe并跨域通信"><a href="#vue内嵌iframe并跨域通信" class="headerlink" title="vue内嵌iframe并跨域通信"></a><a href="#vue%E5%86%85%E5%B5%8Ciframe%E5%B9%B6%E8%B7%A8%E5%9F%9F%E9%80%9A%E4%BF%A1" title="vue内嵌iframe并跨域通信"></a>vue内嵌iframe并跨域通信</h2><h4 id="近期做新老boss跳转页面-老boss使用sessionStorage存储数据-总结一下遇到的问题"><a href="#近期做新老boss跳转页面-老boss使用sessionStorage存储数据-总结一下遇到的问题" class="headerlink" title="近期做新老boss跳转页面,老boss使用sessionStorage存储数据,总结一下遇到的问题"></a><a href="#%E8%BF%91%E6%9C%9F%E5%81%9A%E6%96%B0%E8%80%81boss%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2-%E8%80%81boss%E4%BD%BF%E7%94%A8sessionStorage%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE-%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98" title="近期做新老boss跳转页面,老boss使用sessionStorage存储数据,总结一下遇到的问题"></a>近期做新老boss跳转页面,老boss使用sessionStorage存储数据,总结一下遇到的问题</h4><p>sessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。</p><h4 id="同源的判断规则："><a href="#同源的判断规则：" class="headerlink" title="同源的判断规则："></a><a href="#%E5%90%8C%E6%BA%90%E7%9A%84%E5%88%A4%E6%96%AD%E8%A7%84%E5%88%99%EF%BC%9A" title="同源的判断规则："></a>同源的判断规则：</h4><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://www.test.com</span><br><span class="line">https://www.test.com （不同源，因为协议不同）</span><br><span class="line">http://my.test.com（不同源，因为主机名不同）</span><br><span class="line">http://www.test.com:8080（不同源，因为端口不同）</span><br></pre></td></tr></tbody></table><h4 id="在此项目原先只用document-cookie-没成功，使用了ifram跨域通信去解决，使用的技术是window-postMessage"><a href="#在此项目原先只用document-cookie-没成功，使用了ifram跨域通信去解决，使用的技术是window-postMessage" class="headerlink" title="在此项目原先只用document.cookie 没成功，使用了ifram跨域通信去解决，使用的技术是window.postMessage"></a><a href="#%E5%9C%A8%E6%AD%A4%E9%A1%B9%E7%9B%AE%E5%8E%9F%E5%85%88%E5%8F%AA%E7%94%A8document-cookie-%E6%B2%A1%E6%88%90%E5%8A%9F%EF%BC%8C%E4%BD%BF%E7%94%A8%E4%BA%86ifram%E8%B7%A8%E5%9F%9F%E9%80%9A%E4%BF%A1%E5%8E%BB%E8%A7%A3%E5%86%B3%EF%BC%8C%E4%BD%BF%E7%94%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E6%98%AFwindow-postMessage" title="在此项目原先只用document.cookie 没成功，使用了ifram跨域通信去解决，使用的技术是window.postMessage"></a>在此项目原先只用document.cookie 没成功，使用了ifram跨域通信去解决，使用的技术是window.postMessage</h4><p>参考文档： <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage</a></p><blockquote><p>1、先在vue引入iframe</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   &lt;template&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"act-form"</span>&gt;</span><br><span class="line">        &lt;iframe :src=<span class="string">"src"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>template&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    data () {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">        src: <span class="string">'你的src'</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">```  </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&gt;2、操作iframe获取其对象 </span></span><br><span class="line"><span class="regexp">``` javascript</span></span><br><span class="line"><span class="regexp">mounted () {</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 这里就拿到了iframe的对象</span></span><br><span class="line"><span class="regexp">    this.$refs.iframe</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 这里就拿到了iframe的window对象</span></span><br><span class="line"><span class="regexp">    this.$refs.iframe.contentWindow</span></span><br><span class="line"><span class="regexp">  }</span></span><br></pre></td></tr></tbody></table><p><img src="/img/iframe1.png"></p><blockquote><p>3、vue里面嵌入iframe开始向其传递数据</p></blockquote><hr><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**这里用到了<span class="selector-tag">postMessage</span>   写法 <span class="selector-tag">otherWindow</span><span class="selector-class">.postMessage</span>(<span class="selector-tag">message</span>, <span class="selector-tag">targetOrigin</span>, <span class="selector-attr">[transfer]</span>)**</span><br></pre></td></tr></tbody></table><p>[otherWindow]</p><blockquote><p>其他窗口的一个引用，比如iframe的contentWindow属性、执行window.open返回的窗口对象、或者是命名过或数值索引的window.frames。</p></blockquote><p>[message]</p><blockquote><p>将要发送到其他 window的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化</p></blockquote><p>[targetOrigin]</p><blockquote><p>通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串<em>（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；例如，当用postMessage传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的origin属性完全一致，来防止密码被恶意的第三方截获。如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的targetOrigin，而不是</em>。不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。</p></blockquote><hr><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">methods: {</span><br><span class="line">    sendMessage (userData) {</span><br><span class="line">        <span class="comment">// 外部vue向iframe内部传数据</span></span><br><span class="line">        <span class="keyword">this</span>.iframeWin.postMessage({</span><br><span class="line">           <span class="comment">// cmd: 'getFormJson',</span></span><br><span class="line">            params: userData</span><br><span class="line">        }, <span class="string">'*'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table><p>这里通过点击事件触发，向iframe发送信息，iframe内部通过如下去处理这条数据</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接受父页面发来的信息</span></span><br><span class="line">       <span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line"><span class="keyword">const</span> data = event.data.params</span><br><span class="line">sessionStorage.setItem(<span class="string">"user_data"</span>,<span class="built_in">JSON</span>.stringify(data.data));</span><br><span class="line">sessionStorage.setItem(<span class="string">"listAuth_data"</span>,<span class="built_in">JSON</span>.stringify(data.data.listAuth));</span><br><span class="line">       });</span><br></pre></td></tr></tbody></table><p><img src="/img/iframe2.png"><br>此时已经完全解决这些跨域的参数通信，注意的就是 * 有指定的域名最好指定 安全为上！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vue内嵌iframe并跨域通信&quot;&gt;&lt;a href=&quot;#vue内嵌iframe并跨域通信&quot; class=&quot;headerlink&quot; title=&quot;vue内嵌iframe并跨域通信&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#vue%E5%86%85%E5%B5%8Ciframe%</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Symbol</title>
    <link href="https://shiyongjason.github.io/2023/01/11/Symbol/"/>
    <id>https://shiyongjason.github.io/2023/01/11/Symbol/</id>
    <published>2023-01-11T07:12:51.000Z</published>
    <updated>2023-01-11T07:55:00.146Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a><a href="#Symbol" title="Symbol"></a>Symbol</h3><blockquote><p>概念<br>ES5的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是ES6引入Symbol的原因。</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eg:var a = { name: 'lucy'};</span><br><span class="line"></span><br><span class="line">a.name = 'lili';</span><br><span class="line">这样就会重写属性</span><br></pre></td></tr></tbody></table><blockquote><p>Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）<br>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。</p></blockquote><p><strong>Symbol值通过Symbol函数生成,不能用new命令，基本上，它是一种类似于字符串的数据类型。</strong></p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let s = Symbol();</span><br><span class="line"></span><br><span class="line">typeof s</span><br><span class="line">// "Symbol"</span><br></pre></td></tr></tbody></table><blockquote><p>Symbol可以接收字符串 为参数 Symbol值可以显示转为字符串 下面提到</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var s1 = Symbol('foo');</span><br><span class="line">s1 // Symbol(foo)</span><br><span class="line">s1.toString() // "Symbol(foo)"</span><br></pre></td></tr></tbody></table><blockquote><p>Symbol 接收参数是一个对象的话 就会调用该对象的toString方法，将其转为字符串，然后才生成一个 Symbol 值。</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const obj = {</span><br><span class="line">toString() {</span><br><span class="line">    return 'abc';</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line">const sym = Symbol(obj);</span><br><span class="line">sym // Symbol(abc)</span><br></pre></td></tr></tbody></table><p><strong>Symbol函数是为了独一无二，相同参数的Symbol函数的返回值是不相等的</strong></p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 没有参数的情况</span><br><span class="line">var s1 = Symbol();</span><br><span class="line">var s2 = Symbol();</span><br><span class="line"></span><br><span class="line">s1 === s2 // false</span><br><span class="line"></span><br><span class="line">// 有参数的情况</span><br><span class="line">var s1 = Symbol('foo');</span><br><span class="line">var s2 = Symbol('foo');</span><br><span class="line"></span><br><span class="line">s1 === s2 // false</span><br></pre></td></tr></tbody></table><p><em>++++++s1和s2是两个Symbol值。如果不加参数，它们在控制台的输出都是Symbol()，不利于区分。有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值。</em></p><p><strong>Symbol值不能与其他类型的值进行运算，会报错。</strong></p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var sym = Symbol('My Symbol');</span><br><span class="line"></span><br><span class="line">"your Symbol is " + sym</span><br><span class="line">// TypeError: can't convert Symbol to string</span><br><span class="line">`your Symbol is ${sym}`</span><br><span class="line">// TypeError: can't convert Symbol to string</span><br></pre></td></tr></tbody></table><p><strong>Symbol值可以显式转为字符串,也可以转为布尔值</strong></p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var sym = Symbol('My Symbol');</span><br><span class="line"></span><br><span class="line">String(sym) // 'Symbol(My Symbol)'</span><br><span class="line">sym.toString() // 'Symbol(My Symbol)'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var sym = Symbol();</span><br><span class="line">Boolean(sym) // true</span><br><span class="line">!sym  // false</span><br><span class="line"></span><br><span class="line">if (sym) {</span><br><span class="line">// ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Number(sym) // TypeError: Cannot convert a Symbol value to a number</span><br><span class="line">sym + 2 // TypeError: Cannot convert a Symbol value to a number</span><br></pre></td></tr></tbody></table><hr><h4 id="作为属性名的Symbol"><a href="#作为属性名的Symbol" class="headerlink" title="作为属性名的Symbol"></a><a href="#%E4%BD%9C%E4%B8%BA%E5%B1%9E%E6%80%A7%E5%90%8D%E7%9A%84Symbol" title="作为属性名的Symbol"></a>作为属性名的Symbol</h4><blockquote><p>由于每一个Symbol值都是不相等的，这意味着Symbol值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。</p></blockquote><blockquote><p>下面代码通过方括号结构和Object.defineProperty，将对象的属性名指定为一个Symbol值。</p></blockquote><p>mySymbol</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 第一种写法</span><br><span class="line">var a = {};</span><br><span class="line">a[mySymbol] = 'Hello!';</span><br><span class="line"></span><br><span class="line">// 第二种写法</span><br><span class="line">var a = {</span><br><span class="line">[mySymbol]: 'Hello!'</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">// 第三种写法</span><br><span class="line">var a = {};</span><br><span class="line">Object.defineProperty(a, mySymbol, { value: 'Hello!' });</span><br><span class="line"></span><br><span class="line">// 以上写法都得到同样结果</span><br><span class="line">a[mySymbol]  // "Hello!"</span><br></pre></td></tr></tbody></table><p>还有一种是点运算符 赋值 先看下</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> var mySymbol = Symbol();</span><br><span class="line"> var a = {};</span><br><span class="line"> a.mySymbol = 'Hello!';</span><br><span class="line"> console.log(a.mySymbol)</span><br><span class="line"> console.log(a[mySymbol])</span><br><span class="line"> console.log(a['mySymbol'])</span><br><span class="line">// VM642:5 Hello!</span><br><span class="line">// undefined</span><br><span class="line">// VM642:6 Hello!</span><br></pre></td></tr></tbody></table><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var mySymbol = Symbol();</span><br><span class="line">var a = {};</span><br><span class="line">a.mySymbol = 'Hello me!';</span><br><span class="line">a[mySymbol] = 'Hello you!';</span><br><span class="line">console.log(a.mySymbol)   //</span><br><span class="line">console.log(a[mySymbol])  //  你猜</span><br><span class="line">console.log(a['mySymbol'])  //</span><br></pre></td></tr></tbody></table><p><strong>因为点运算符后面总是字符串，所以不会读取mySymbol作为标识名所指代的那个值，导致a的属性名实际上是一个字符串，而不是一个Symbol值。</strong></p><blockquote><p>*****在对象的内部，使用Symbol值定义属性时，Symbol值必须放在方括号之中。 [Symbol(‘你想要的’)]：‘你想要的’ 取值一直没找到问题所在</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let s = Symbol();</span><br><span class="line">let obj = {</span><br><span class="line">  [s](arg) { ... }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let myobj = {</span><br><span class="line">    [Symbol('name')]:'yongge'</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 输出yonge</span><br></pre></td></tr></tbody></table><h4 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a><a href="#%E5%B1%9E%E6%80%A7%E5%90%8D%E7%9A%84%E9%81%8D%E5%8E%86" title="属性名的遍历"></a>属性名的遍历</h4><blockquote><p>Symbol 作为属性名，该属性不会出现在for…in、for…of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。但是，它也不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。</p></blockquote><blockquote><p>Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var obj = {};</span><br><span class="line">var a = Symbol('a');</span><br><span class="line">var b = Symbol('b');</span><br><span class="line"></span><br><span class="line">obj[a] = 'Hello';</span><br><span class="line">obj[b] = 'World';</span><br><span class="line"></span><br><span class="line">obj // {Symbol(a): "Hello", Symbol(b): "World"}</span><br><span class="line"></span><br><span class="line">var objectSymbols = Object.getOwnPropertySymbols(obj);</span><br><span class="line"></span><br><span class="line">objectSymbols</span><br><span class="line">// [Symbol(a), Symbol(b)]</span><br></pre></td></tr></tbody></table><blockquote><p>另一个例子，Object.getOwnPropertySymbols方法与for…in循环、Object.getOwnPropertyNames方法进行对比的例子。</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var obj = {};</span><br><span class="line"></span><br><span class="line">var foo = Symbol("foo");</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj, foo, { value: "foobar"});</span><br><span class="line"></span><br><span class="line">for (var i in obj) {</span><br><span class="line">  console.log(i); // 无输出</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Object.getOwnPropertyNames(obj)</span><br><span class="line">// []</span><br><span class="line"></span><br><span class="line">Object.getOwnPropertySymbols(obj)</span><br><span class="line">// [Symbol(foo)]</span><br></pre></td></tr></tbody></table><blockquote><p>使用Object.getOwnPropertyNames方法得不到Symbol属性名，需要使用Object.getOwnPropertySymbols方法。另一个新的API，Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和 Symbol 键名</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let obj = {</span><br><span class="line">  [Symbol('my_key')]: 1,</span><br><span class="line">  enum: 2,</span><br><span class="line">  nonEnum: 3</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">Reflect.ownKeys(obj)</span><br><span class="line">// [Symbol(my_key), 'enum', 'nonEnum']</span><br></pre></td></tr></tbody></table><h4 id="Symbol-for-，Symbol-keyFor"><a href="#Symbol-for-，Symbol-keyFor" class="headerlink" title="Symbol.for()，Symbol.keyFor()"></a><a href="#Symbol-for-%EF%BC%8CSymbol-keyFor" title="Symbol.for()，Symbol.keyFor()"></a>Symbol.for()，Symbol.keyFor()</h4><blockquote><p>Symbol.for() 首先在全局中搜索有没有以该参数作为名称的Symbol值，如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。和直接的Symbol就点不同了。<br>Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用Symbol.for(“cat”)30次，每次都会返回同一个 Symbol 值，但是调用Symbol(“cat”)30次，会返回30个不同的Symbol值。</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var s1 = Symbol.for('foo');</span><br><span class="line">var s2 = Symbol.for('foo');</span><br><span class="line"></span><br><span class="line">s1 === s2 // true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Symbol.for("bar") === Symbol.for("bar")</span><br><span class="line">// true</span><br><span class="line"></span><br><span class="line">Symbol("bar") === Symbol("bar")</span><br><span class="line">// false</span><br></pre></td></tr></tbody></table><blockquote><p>Symbol.keyFor方法返回一个已登记的Symbol类型值的key。实质就是检测该Symbol是否已创建</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var s1 = Symbol.for("foo");</span><br><span class="line">Symbol.keyFor(s1) // "foo"</span><br><span class="line"></span><br><span class="line">var s2 = Symbol("foo");</span><br><span class="line">Symbol.keyFor(s2) // undefined</span><br></pre></td></tr></tbody></table><h4 id="内置Symbol"><a href="#内置Symbol" class="headerlink" title="内置Symbol"></a><a href="#%E5%86%85%E7%BD%AESymbol" title="内置Symbol"></a>内置Symbol</h4><p>除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法</p><p>　　1、Symbol.haslnstance</p><p>　　一个在执行instanceof时调用的内部方法，用于检测对象的继承信息</p><p>　　2、Symbol.isConcatSpreadable</p><p>　　一个布尔值，用于表示当传递一个集合作为Array.prototype.concat()方法的参数时，是否应该将集合内的元素规整到同一层级</p><p>　　3、Symbol.iterator</p><p>　　一个返回迭代器的方法</p><p>　　4、Symbol.match</p><p>　　一个在调用String.prototype.match()方法时调用的方法，用于比较字符串</p><p>　　5、Symbol.replace</p><p>　　一个在调用String.prototype.replace()方法时调用的方法，用于替换字符串的子串</p><p>　　6、Symbol.search</p><p>　　一个在调用String.prototype.search()方法时调用的方法，用于在字符串中定位子串</p><p>　　7、Symbol.species</p><p>　　用于创建派生类的构造函数</p><p>　　8、Symbol.split</p><p>　　一个在调用String.prototype.split()方法时调用的方法，用于分割字符串</p><p>　　9、Symbol.toprimitive</p><p>　　一个返回对象原始值的方法</p><p>　　10、Symbol.ToStringTag</p><p>　　一个在调用Object.prototype.toString()方法时使用的字符串，用于创建对象描述</p><p>　　11、Symbol.unscopables</p><p>　　一个定义了一些不可被with语句引用的对象属性名称的对象集合</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Symbol&quot;&gt;&lt;a href=&quot;#Symbol&quot; class=&quot;headerlink&quot; title=&quot;Symbol&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Symbol&quot; title=&quot;Symbol&quot;&gt;&lt;/a&gt;Symbol&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;概念&lt;b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据解构</title>
    <link href="https://shiyongjason.github.io/2023/01/11/%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%84/"/>
    <id>https://shiyongjason.github.io/2023/01/11/%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%84/</id>
    <published>2023-01-11T07:10:20.000Z</published>
    <updated>2023-01-11T07:55:00.149Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ES6—数据解构"><a href="#ES6—数据解构" class="headerlink" title="ES6—数据解构"></a><a href="#ES6%E2%80%94%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%84" title="ES6—数据解构"></a>ES6—数据解构</h3><blockquote><p>来同质化的代码 解构赋值表达式的值与表达式右侧(也就是&#x3D;右侧)的值相等，如此一来，在任何可以使用值的地方都可以使用解构赋值表达式<br>–对应，有就有 没有就不存在</p></blockquote><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a><a href="#%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84" title="对象解构"></a>对象解构</h4><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let  myObj = {</span><br><span class="line">    type:'name',</span><br><span class="line">    value:'yongge'</span><br><span class="line">}</span><br><span class="line">let { type, value, name} = myObj</span><br><span class="line">console.log(type)  //</span><br><span class="line">console.log(value) //</span><br><span class="line">console.log(name)  // undefined</span><br></pre></td></tr></tbody></table><blockquote><p>如果使用var、let、const解构声明变量，必须要提供初始化程序（也就是等号右侧的值），否则会导致程序抛出语法错误</p></blockquote><hr><blockquote><p>解构出来的变量 一定要是 对象中能够查找到的属性名 当指定的属性不存在时，可以随意定义一个默认值，在属性名称后添加一个等号(&#x3D;)和相应的默认值即可 (直接定义个默认值)<br>如果解构出来的属性在对象中查找不到，值为undefined</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let  myObj = {</span><br><span class="line">    type:'name',</span><br><span class="line">    value:'yongge'</span><br><span class="line">}</span><br><span class="line">let { type, value, name='姓名'} = myObj</span><br><span class="line">console.log(type)  //</span><br><span class="line">console.log(value) //</span><br><span class="line">console.log(name)  //  姓名</span><br></pre></td></tr></tbody></table><hr><blockquote><p>解构出来的变量虽然是跟属性名称相同，但是他不再是属性，而是外部的变量，这个变量名也可以被修改， 不一定要跟属性同名<br>上面的都是同名的变量 为非同名局部变量赋值<br>假如想要换个变量 右边 大括号里面 重新申明下 xx:oo 旧的名称 : 新的名称</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let  myObj = {</span><br><span class="line">    type:'name',</span><br><span class="line">    value:'yongge'</span><br><span class="line">}</span><br><span class="line">let { type:localType, value:localTValue} = myObj</span><br><span class="line">console.log(localType)  //</span><br><span class="line">console.log(localTValue) //</span><br></pre></td></tr></tbody></table><h4 id="嵌套对象解构"><a href="#嵌套对象解构" class="headerlink" title="嵌套对象解构"></a><a href="#%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84" title="嵌套对象解构"></a>嵌套对象解构</h4><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let myObj = {</span><br><span class="line">    type:'name',</span><br><span class="line">    value:'yongge',</span><br><span class="line">    child:{</span><br><span class="line">        firstObj:{</span><br><span class="line">            childType:'sex',</span><br><span class="line">            childValue:'nan'</span><br><span class="line">        },</span><br><span class="line">        secondObj:{</span><br><span class="line">            childType:'sex',</span><br><span class="line">            childValue:'nv'</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">let {child:{firstObj:newObj}} = myObj</span><br><span class="line">console.log(newObj)  //</span><br></pre></td></tr></tbody></table><blockquote><p>先找一层 在进一层找 可以 点 属性获取值</p></blockquote><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a><a href="#%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84" title="数组解构"></a>数组解构</h4><blockquote><p>为需要的元素提供变量名</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let colors = ['red','green','blue']</span><br><span class="line">let [firstColor,secondColor] = colors;</span><br><span class="line">console.log(firstColor);//"red"</span><br><span class="line">console.log(secondColor);//"green"</span><br><span class="line"></span><br><span class="line">对于不需要的解构的值</span><br><span class="line"></span><br><span class="line">let [ , ,thirdColor] = colors</span><br><span class="line">console.log(thirdColor);</span><br></pre></td></tr></tbody></table><blockquote><p>如果我们先声明了变量，之后也可以直接通过解构赋值修改变量的值。</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let colors = ['red','green','blue'],firstColor = 'black',secondColor = 'yellow';</span><br><span class="line">[firstColor,secondColor] = colors;</span><br><span class="line"></span><br><span class="line">console.log(firstColor);//"red"</span><br><span class="line">console.log(secondColor);//"green"</span><br></pre></td></tr></tbody></table><blockquote><p>可以在数组解构赋值表达式中为任意变量添加默认值。注意：：：：只有当该位置在右侧数组中的值不存在时或值为undefined时，默认值才会生效。</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let colors = ['red','green','blue'];</span><br><span class="line">[firstColor,secondColor,thirdColor='orange'] = colors;</span><br><span class="line"></span><br><span class="line">console.log(firstColor);//""</span><br><span class="line">console.log(secondColor);//""</span><br><span class="line">console.log(thirdColor);//""</span><br></pre></td></tr></tbody></table><h4 id="嵌套数组解构赋值"><a href="#嵌套数组解构赋值" class="headerlink" title="嵌套数组解构赋值"></a><a href="#%E5%B5%8C%E5%A5%97%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC" title="嵌套数组解构赋值"></a>嵌套数组解构赋值</h4><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let arr = [ 10, [ 20, 30 ], 40 ];</span><br><span class="line">console.log( arr[1][1] ); //30</span><br><span class="line"></span><br><span class="line">let [ one, two, three, four ] = arr;</span><br><span class="line">console.log( one, two, three, four ); //</span><br><span class="line"></span><br><span class="line">[ one, [ two, three ], four ] = arr; //</span><br><span class="line">console.log( one, two, three, four ); //10 20 30 40</span><br></pre></td></tr></tbody></table><h4 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC" title="字符串的解构赋值"></a>字符串的解构赋值</h4><blockquote><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const [a, b, c, d, e] = 'hello';</span><br><span class="line">a // "h"</span><br><span class="line">b // "e"</span><br><span class="line">c // "l"</span><br><span class="line">d // "l"</span><br><span class="line">e // "o"</span><br></pre></td></tr></tbody></table><blockquote><p>类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let {length : len} = 'hello';</span><br><span class="line">len // 5</span><br></pre></td></tr></tbody></table><h4 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a><a href="#%E6%95%B0%E5%80%BC%E5%92%8C%E5%B8%83%E5%B0%94%E5%80%BC%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h4><blockquote><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let {toString: s} = 123;</span><br><span class="line">s === Number.prototype.toString // true</span><br><span class="line"></span><br><span class="line">let {toString: s} = true;</span><br><span class="line">s === Boolean.prototype.toString // true</span><br></pre></td></tr></tbody></table></blockquote><blockquote><p>上面代码中，数值和布尔值的包装对象都有toString属性，因此变量s都能取到值。</p></blockquote><blockquote><p>解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let { prop: x } = undefined; // TypeError</span><br><span class="line">let { prop: y } = null; // TypeError</span><br></pre></td></tr></tbody></table><h4 id="解构交换变量值"><a href="#解构交换变量值" class="headerlink" title="解构交换变量值"></a><a href="#%E8%A7%A3%E6%9E%84%E4%BA%A4%E6%8D%A2%E5%8F%98%E9%87%8F%E5%80%BC" title="解构交换变量值"></a>解构交换变量值</h4><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let a =10 , b = 8;</span><br><span class="line">[a,b]=[b,a]</span><br><span class="line">console.log(a,b)</span><br></pre></td></tr></tbody></table><h4 id="解构中的不定参数-…"><a href="#解构中的不定参数-…" class="headerlink" title="解构中的不定参数(…)"></a><a href="#%E8%A7%A3%E6%9E%84%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%AE%9A%E5%8F%82%E6%95%B0-%E2%80%A6" title="解构中的不定参数(…)"></a>解构中的不定参数(…)</h4><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr =[10,20,30]</span><br><span class="line">let [first,...others ] = arr</span><br><span class="line">console.log(first,others)</span><br></pre></td></tr></tbody></table><blockquote><p>复制数组</p></blockquote><p>ES5  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [ 10, 20, 30 ];</span><br><span class="line">let newArr = arr.concat();</span><br><span class="line">console.log( newArr );</span><br></pre></td></tr></tbody></table><blockquote><p>用解构与不定参数结合 复制 数组</p></blockquote><p>ES6</p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [ 10, 20, 30 ];</span><br><span class="line">let [...newArr] = arr;</span><br><span class="line">console.log( newArr );</span><br></pre></td></tr></tbody></table><h4 id="解构表达式传参"><a href="#解构表达式传参" class="headerlink" title="解构表达式传参"></a><a href="#%E8%A7%A3%E6%9E%84%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BC%A0%E5%8F%82" title="解构表达式传参"></a>解构表达式传参</h4><blockquote><p>方法 可以接受 解构表达式</p></blockquote><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function show ({name,age}){</span><br><span class="line">    console.log(name,age)</span><br><span class="line">}</span><br><span class="line">let obj = {</span><br><span class="line">    name:'yongge',</span><br><span class="line">    age:'28'</span><br><span class="line">}</span><br><span class="line">show (obj)    //函数里面可以写成表达式 {name，age} = obj</span><br><span class="line"></span><br><span class="line">function add([x, y]){</span><br><span class="line">return x + y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">add([1, 2]); // 3</span><br></pre></td></tr></tbody></table><blockquote><p>函数show,add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ES6—数据解构&quot;&gt;&lt;a href=&quot;#ES6—数据解构&quot; class=&quot;headerlink&quot; title=&quot;ES6—数据解构&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#ES6%E2%80%94%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%84&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js 变量</title>
    <link href="https://shiyongjason.github.io/2023/01/11/js-%E5%8F%98%E9%87%8F/"/>
    <id>https://shiyongjason.github.io/2023/01/11/js-%E5%8F%98%E9%87%8F/</id>
    <published>2023-01-11T07:05:37.000Z</published>
    <updated>2023-01-11T07:55:00.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a><a href="#%E4%B8%80%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F" title="一、作用域"></a>一、作用域</h1><p>在 JavaScript 中, 作用域（scope，或译有效范围）就是变量和函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期</p><h2 id="全局-x2F-局部作用域"><a href="#全局-x2F-局部作用域" class="headerlink" title="全局&#x2F;局部作用域"></a><a href="#%E5%85%A8%E5%B1%80-%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F" title="全局/局部作用域"></a>全局&#x2F;局部作用域</h2><p>2.1 全局作用域(Global Scope)</p><p>（1）不在任何函数内定义的变量就具有全局作用域。<br>（2）实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性。<br>（3）window对象的内置属性都拥有全局作用域，例如 window.name、window.location、window.top 等。<br><img src="/img/1.png"></p><p>2.2 局部作用域(Local Scope)<br>（1）JavaScript的作用域是通过函数来定义的，在一个函数中定义的变量只对这个函数内部可见，称为函数（局部）作用域。</p><h2 id="全局-x2F-局部变量"><a href="#全局-x2F-局部变量" class="headerlink" title="全局&#x2F;局部变量"></a><a href="#%E5%85%A8%E5%B1%80-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F" title="全局/局部变量"></a>全局&#x2F;局部变量</h2><p>3.1 全局变量</p><p>（1）在函数定义外声明的变量是全局变量。</p><p>（2）全局变量有 全局作用域，它的值可在整个程序中访问和修改。</p><p>（3）如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</p><p>3.2 局部变量</p><p>（1）在函数定义内声明的变量是局部变量。</p><p>（2）因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。</p><p>（3）每当执行函数时，都会创建和销毁该变量，且无法通过函数之外的任何代码访问该变量。</p><p>（4）函数外无法访问函数内的变量，函数内却可以访问函数外的变量。</p><p>全局变量</p><p>1、在函数定义外声明的变量是全局变量；全局变量有全局作用域，它的值可在整个程序中访问和修改。<br><img src="/img/2.png"><br>2、如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。<br><img src="/img/3.png"></p><p>局部变量</p><p>1、因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。<br><img src="/img/5.png"></p><p>2、每当执行函数时，都会创建和销毁该变量，且无法通过函数之外的任何代码访问该变量。<br><img src="/img/6.png"></p><p>3、函数外无法访问函数内的变量，函数内却可以访问函数外的变量。(闭包)<br><img src="/img/7.png"></p><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a><a href="#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F" title="块级作用域"></a>块级作用域</h2><p>块级作用域指在If语句，switch语句，循环语句等语句块中定义变量，这意味着变量不能在语句块之外被访问。</p><p>4 <code>var 不支持块级作用域</code></p><p>（1）在If等语句块中，定义的变量从属于该块所在的作用域，和函数不同，他们不会创建新的作用域。<br><img src="/img/11.png"></p><p><code>let和const</code></p><p>（1）为了解决块级作用域，ES6引入了 let 和 const 关键字，可以声明一个块级作用域的变量。<br><img src="/img/12.png"><br>（2）<strong>*<strong>全局作用域的生存周期与上述应用相同。局部作用域只在该函数调用执行期间存在。</strong>*</strong></p><h2 id="七、上下文-vs-作用域"><a href="#七、上下文-vs-作用域" class="headerlink" title="七、上下文 vs 作用域"></a><a href="#%E4%B8%83%E3%80%81%E4%B8%8A%E4%B8%8B%E6%96%87-vs-%E4%BD%9C%E7%94%A8%E5%9F%9F" title="七、上下文 vs 作用域"></a>七、上下文 vs 作用域</h2><p>（1）首先需要说明的是上下文和作用域是不同的概念。</p><p>（2）每个函数调用都有与之相关的作用域和上下文。从根本上说，作用域是基于函数，而上下文是基于对象。</p><p>（3）作用域是和每次函数调用时变量的访问有关，并且每次调用都是独立的。上下文总是关键字 this 的值，是调用当前可执行代码的对象的引用。</p><h2 id="八、“this”-上下文"><a href="#八、“this”-上下文" class="headerlink" title="八、“this” 上下文"></a><a href="#%E5%85%AB%E3%80%81%E2%80%9Cthis%E2%80%9D-%E4%B8%8A%E4%B8%8B%E6%96%87" title="八、“this” 上下文"></a>八、“this” 上下文</h2><p>（1）上下文通常是取决于一个函数如何被调用。当函数作为对象的方法被调用时，this 指向调用方法的对象。<br><img src="/img/13.png"></p><p>（2）当调用一个函数时，通过 new 操作符创建一个对象的实例，当以这种方式调用时，this 指向新创建的实例。<br><img src="/img/14.png"></p><p>（3）当调用一个未绑定函数，this 默认指向全局上下文或者浏览器中的window对象。然而如果函数在严格模式下被执行(“use strict”)，this 默认指向 undefined。</p><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a><a href="#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87" title="执行上下文"></a>执行上下文</h2><p>1）当函数执行时，会创建一个称为执行上下文的内部对象（可理解为作用域，不是前面讨论的上下文）。一个执行上下文定义了一个函数执行时的环境。</p><p>（2）函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文。</p><p>（3）当javascript代码文件被浏览器载入后，默认最先进入的是一个全局的执行上下文。当在全局上下文中调用执行一个函数时，程序流就进入该被调用函数内，此时引擎就会为该函数创建一个新的执行上下文，并且将其压入到执行栈顶部（作用域链）。浏览器总是执行位于执行栈顶部的当前执行上下文，一旦执行完毕，该执行上下文就会从执行栈顶部弹出，并且控制权将进入其下的执行上下文。这样，执行栈中的执行上下文就会被依次执行并且弹出，直到回到全局的执行上下文。</p><p>十、作用域链</p><p>（1）在JavaScript中，函数也是对象，对象中有些属性我们可以访问，但有些不可以（访问），这些属性仅供JavaScript引擎存取，[[scope]]就是其中一个。</p><p>（2）[[scope]]指的就是我们所说的作用域，其中存储了执行上下文的集合。</p><p>（3）[[scope]]中所存储的执行上下文对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。<br><img src="/img/15.png"></p><p>（1）运行示例代码将会导致嵌套的函数被从上倒下执行，一直到 fourth 函数，此时作用域链从上到下为： fourth, third, second, first, global。</p><p>（2）fourth 函数能够访问全局变量和任何定义在first,second和third函数中的变量（和访问自己的变量一样）。</p><p>（3）一旦fourth函数执行完成，其就会从作用域链顶部移除，并且执行权会返回到third函数。这个过程一直持续到所有代码完成执行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、作用域&quot;&gt;&lt;a href=&quot;#一、作用域&quot; class=&quot;headerlink&quot; title=&quot;一、作用域&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#%E4%B8%80%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F&quot; title=&quot;一、作用域&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>闭包 变量</title>
    <link href="https://shiyongjason.github.io/2023/01/11/%E9%97%AD%E5%8C%85-%E5%8F%98%E9%87%8F/"/>
    <id>https://shiyongjason.github.io/2023/01/11/%E9%97%AD%E5%8C%85-%E5%8F%98%E9%87%8F/</id>
    <published>2023-01-11T07:03:48.000Z</published>
    <updated>2023-01-11T07:55:00.150Z</updated>
    
    <content type="html"><![CDATA[<p>##闭包就是functions that return function<br>(是输出而是返回一个函数) f()()<br>变量的作用域无非就是两种：全局变量和局部变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数内部可以直接读取全局变量。</span><br></pre></td></tr></table></figure><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var n = 1;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>(){</span><br><span class="line">  console.log(n)</span><br><span class="line">}</span><br><span class="line">f1(); // 1</span><br></pre></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在函数外部自然无法读取函数内的局部变量</span><br><span class="line">**函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量**</span><br></pre></td></tr></table></figure><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>(){</span><br><span class="line">　　　　var n=1;</span><br><span class="line">　　}</span><br><span class="line">　　alert(n); // error</span><br></pre></td></tr></tbody></table><h3 id="如何从外部读取局部变量？"><a href="#如何从外部读取局部变量？" class="headerlink" title="如何从外部读取局部变量？"></a><a href="#%E5%A6%82%E4%BD%95%E4%BB%8E%E5%A4%96%E9%83%A8%E8%AF%BB%E5%8F%96%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%EF%BC%9F" title="如何从外部读取局部变量？"></a>如何从外部读取局部变量？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数的内部，再定义一个函数。</span><br></pre></td></tr></table></figure><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>(){</span><br><span class="line">　　　　var n=2;</span><br><span class="line">　　　　<span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>(){</span><br><span class="line">　　　　　　alert(n); // 2</span><br><span class="line">　　　　}</span><br><span class="line">　　}</span><br><span class="line">----</span><br><span class="line">　　<span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>(){</span><br><span class="line">　　　　var n=1;</span><br><span class="line">　　　　<span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>(){</span><br><span class="line">　　　　　　alert(n); </span><br><span class="line">　　　　}</span><br><span class="line">　　　　<span class="built_in">return</span> f2;</span><br><span class="line">　　}</span><br><span class="line">　　var result=f1();</span><br><span class="line">　　result(); // 1</span><br></pre></td></tr></tbody></table><p>函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。<br>这就是Javascript语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，</span><br><span class="line">另一个就是让这些变量的值始终保持在内存中</span><br></pre></td></tr></table></figure><h3 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a><a href="#%E4%BD%BF%E7%94%A8%E9%97%AD%E5%8C%85%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9" title="使用闭包的注意点"></a>使用闭包的注意点</h3><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;##闭包就是functions that return function&lt;br&gt;(是输出而是返回一个函数) f()()&lt;br&gt;变量的作用域无非就是两种：全局变量和局部变量。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数组排序</title>
    <link href="https://shiyongjason.github.io/2023/01/11/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/"/>
    <id>https://shiyongjason.github.io/2023/01/11/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</id>
    <published>2023-01-11T07:02:26.000Z</published>
    <updated>2023-01-11T07:55:00.149Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a><a href="#sort" title="sort()"></a>sort()</h3><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">-8</span>,<span class="number">-3</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">8</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">val1,val2</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> val1-val2;</span><br><span class="line">};</span><br><span class="line">array.sort(compare);</span><br><span class="line"><span class="built_in">document</span>.write(array);<span class="comment">// -8 -3 1 4...</span></span><br></pre></td></tr></tbody></table><p>sort()方法按照升序排列数组项，会调用每个数组项的toString()转型方法，然后比较得到的字符串。</p><p>toString()方法是把布尔值或BooleanObject转换为字符串，并返回结果。</p><p>compare()函数方法是一个比较函数，作为sort()方法的参数。</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><a href="#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F" title="冒泡排序"></a>冒泡排序</h3><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var array = [1,4,-8,-3,6,12,9,8];</span><br><span class="line">function sort(arr){</span><br><span class="line">for(var j =0; j&lt;arr.length;j++){</span><br><span class="line">for(var i=0;i&lt;arr.length-1-j;i++){</span><br><span class="line">if(arr[i]&gt;arr[i+1]){</span><br><span class="line">                var temp = arr[i];</span><br><span class="line">                arr[i] = arr[i+1];</span><br><span class="line">                arr[i+1] = temp;</span><br><span class="line">            }</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">sort(array);</span><br><span class="line">document.write(array);</span><br></pre></td></tr></tbody></table><p>（1）比较相邻的元素。如果第一个比第二个大，就交换他们两个位置。<br>（2）对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>（3）针对所有的元素重复以上的步骤，除了最后一个。<br>（4）持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a><a href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F" title="快速排序"></a>快速排序</h3><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var array = [1,4,-8,-3,6,12,9,8];</span><br><span class="line">function quickSort(arr){</span><br><span class="line">//如果数组长度小于等于1，则返回数组本身</span><br><span class="line">    if(arr.length&lt;=1){</span><br><span class="line">        return arr;</span><br><span class="line">    }</span><br><span class="line">    //定义中间值的索引</span><br><span class="line">    var index = Math.floor(arr.length/2);</span><br><span class="line">    //取到中间值</span><br><span class="line">    var temp = arr.splice(index,1);</span><br><span class="line">    //定义左右部分数组</span><br><span class="line">    var left = [];</span><br><span class="line">    var right = [];</span><br><span class="line">    for(var i=0;i&lt;arr.length;i++){</span><br><span class="line">    //如果元素比中间值小，那么放在左边，否则放右边</span><br><span class="line">        if(arr[i]&lt;temp){</span><br><span class="line">            left.push(arr[i]);</span><br><span class="line">        }else{</span><br><span class="line">            right.push(arr[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return quickSort(left).concat(temp,quickSort(right));</span><br><span class="line">}</span><br><span class="line">document.write(quickSort(array));</span><br></pre></td></tr></tbody></table><p>Math.floor(x)方法是向下取整，返回小于或等于x的最接近的整数。</p><p>splice(index,num,item)方法是向数组中添加项目，或是从数组中删除项目，并返回被删除的项目。</p><p>index是整数，被操作项目所在的位置（必须）<br>num是整数，要删除的项目的数量，如果为0，表示不删除（必须）<br>item是向数组中添加的新项目，可以是多个（可选）<br>push()方法是向数组末尾添加一个或多个新项目并返回新数组的长度</p><p>concat()方法连接两个或多个数组，不会改变原有数组，返回一个新数组</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;sort&quot;&gt;&lt;a href=&quot;#sort&quot; class=&quot;headerlink&quot; title=&quot;sort()&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#sort&quot; title=&quot;sort()&quot;&gt;&lt;/a&gt;sort()&lt;/h3&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSS3新特性</title>
    <link href="https://shiyongjason.github.io/2023/01/11/CSS3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://shiyongjason.github.io/2023/01/11/CSS3%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2023-01-11T06:58:08.000Z</published>
    <updated>2023-01-11T07:55:00.145Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS3的新特性大致分为以下六类"><a href="#CSS3的新特性大致分为以下六类" class="headerlink" title="CSS3的新特性大致分为以下六类"></a><a href="#CSS3%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E5%A4%A7%E8%87%B4%E5%88%86%E4%B8%BA%E4%BB%A5%E4%B8%8B%E5%85%AD%E7%B1%BB" title="CSS3的新特性大致分为以下六类"></a>CSS3的新特性大致分为以下六类</h3><h1 id="1-CSS3选择器"><a href="#1-CSS3选择器" class="headerlink" title="1.CSS3选择器"></a><a href="#1-CSS3%E9%80%89%E6%8B%A9%E5%99%A8" title="1.CSS3选择器"></a>1.CSS3选择器</h1><p>基本选择器，属性选择器，伪类选择器，nth选择器</p><h1 id="2-CSS3边框与圆角"><a href="#2-CSS3边框与圆角" class="headerlink" title="2.CSS3边框与圆角"></a><a href="#2-CSS3%E8%BE%B9%E6%A1%86%E4%B8%8E%E5%9C%86%E8%A7%92" title="2.CSS3边框与圆角"></a>2.CSS3边框与圆角</h1><p>1.CSS3圆角border-radius</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义：可以为元素添加圆角边框（块元素，行内块元素，行内元素）</span><br></pre></td></tr></table></figure><p>属性：  </p><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">border-top-left-radius 左上角</span><br><span class="line">border-top-right-radius 右上角</span><br><span class="line">border-bottom-right-radius 右下角</span><br><span class="line">border-bottom-left-radius 左下角</span><br></pre></td></tr></tbody></table><p>复合属性：border-radius：<br>属性值</p><p>四个值：左上角 右上角 右下角 左下角<br>三个值：左上角 右上角和左下角 右下角<br>两个值：左上角和右下角 右上角和左下角<br>一个值：4个角都生效</p><p>border-radius中的属性值由两个参数值构成: value1 &#x2F; value2，值之间用&#x2F;分隔，value1代表圆角的水平半径，value2代表圆角的垂直半径。</p><p>2.盒阴影box-shadow</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">定义：可以控制一个或多个下拉阴影的框</span><br><span class="line"></span><br><span class="line">语法：box-shadow: 水平方向的偏移量 垂直方向的偏移量 模糊程度 扩展程度 颜色 是否具有内阴影</span><br></pre></td></tr></table></figure><h1 id="3-CSS3背景与渐变"><a href="#3-CSS3背景与渐变" class="headerlink" title="3.CSS3背景与渐变"></a><a href="#3-CSS3%E8%83%8C%E6%99%AF%E4%B8%8E%E6%B8%90%E5%8F%98" title="3.CSS3背景与渐变"></a>3.CSS3背景与渐变</h1><p>1.CSS3背景</p><p>background-image<br>语法：<br>backgroundimage:url(‘1.jpg),url(‘2.jpg’)<br>使用逗号把图片分开<br>注意：元素引入多个背景图片，前面图片会覆盖后面的图片<br>background-cilp<br>定义：指定背景的绘制区域（裁剪）<br>语法：<br>background-cilp：border-box &#x2F; padding-box &#x2F; content-box<br>属性介绍：<br>border-box：背景被裁剪到边框盒（从边框开始绘制背景图片）—默认<br>padding-box：背景被裁剪到内边距框（从内边距开始绘制背景图片）<br>content-box：背景被裁剪到内容框<br>background-origin<br>定义：设置背景图像的原始起始位置<br>语法：<br>background-origin：border-box &#x2F; padding-box &#x2F; content-box(背景图片坐标原点与这三个有关系)<br>属性的介绍：<br>border-box：相对于边框来定位<br>padding-box：相对于内边距来定位<br>content-box：相对于内容框来定位<br>另外有一个需要了解<br>background-position:定义背景图片的位置，水平与垂直方向上面的偏移量(参考点)<br>background-repeat<br>定义：设置是否及如何重复背景图像，默认地，背景图像在水平和垂直方向上重复。</p><p>属性值：<br>repeat 默认。背景图像将在垂直方向和水平方向重复。<br>repeat-x 背景图像将在水平方向重复。<br>repeat-y 背景图像将在垂直方向重复。<br>no-repeat 背景图像将仅显示一次。<br>inherit 规定应该从父元素继承 background-repeat 属性的设置</p><p>background-size<br>定义：指定背景图像的大小<br>语法：<br>background-size：number &#x2F; % &#x2F; cover &#x2F; contain<br>属性介绍：<br>number: 宽度 高度（如果只写一个数值，第二个数值默认auto）<br>百分比： 0% - 100% 之间的任何值，此时的百分比参照于元素div的大小<br>cover：将背景图片等比缩放以填满整个容器（最远边），如果高度达到一定比例100%，宽度多出的会溢出，但是，具体那部分溢出取决于定位<br>contain：将背景图片等比缩放至某一边紧贴容器边缘为止（最近边），如果图片高度比较小，高度就会有空白区域出现<br>复合属性background<br>定义：可以在一个声明中设置所有的背景属性<br>语法：<br>background：color position size repeat origin clip attachment image; background: #abc center 50% no-repeat content-box content-box fixed url(‘1.jpg’) ,url(‘2.jpg’)…</p><p>2.CSS3渐变</p><p>定义：可以在两个或者多个指定颜色之间显示平移的过渡</p><p>线性渐变<br>定义：是沿着一根轴线改变颜色，从起点到终点进行顺序渐变（从一边拉向另一边）<br>语法：background:linear-gradient(方向，开始颜色，结束颜色)</p><p>方向介绍：</p><p>1.方向从上到下（默认）<br>background: linear-gradient(red,blue);<br>2.方向从左到右<br>background: linear-gradient(to right,red,blue);<br>3.对角<br>background: linear-gradient(to right bottom,red,blue);<br>4.角度(单位deg)<br>background: linear-gradient(角度,red,blue);<br>角度说明：0deg 将创建一个从下到上的渐变，90deg将创建一个从左到右的渐变</p><p>颜色结点：默认每个颜色均匀分布</p><p>background: linear-gradient(red 10%,blue 20%,green 30%,yellow 40%);<br>从0%到10%，为红色，从10%到20%为红色到蓝色的渐变，从20%到30%为蓝色到绿色的渐变，从30%到40%，为绿色到黄色的渐变,从40%到100%为黄色<br>background: linear-gradient(red 10%,blue);<br>从0%到10%，为红色，从10%到100%为红色到蓝色的渐变<br>最后如果不写具体数值，默认到100%<br>background: linear-gradient(red,blue 30%);<br>从0%到30%，为红色到蓝色的渐变<br>如果第一个不写，默认数值是 0%<br>background:lineargradient(rgba(255,0,0,0),rgba(255,0,0,1));<br>由透明色变为不透明色</p><p>重复渐变</p><p>示例：background: repeating-linear-gradient(90deg,red 0%,blue 20%);或者 background: repeating-linear-gradient(90deg,red 0%,blue 10%,red 20%);<br>注意：把元素的整体宽度看成100%</p><p>径向渐变<br>定义：从起点到终点，颜色从内向外进行圆形渐变<br>语法：background:radial-gradient(形状尺寸，开始颜色，结束颜色)<br>形状分类：<br>circle — 圆形<br>ellipse — 椭圆形<br>注意：当元素的高和宽一样时，参数无论设置哪个，都是圆形</p><p>尺寸大小：<br>closest-side最近边<br>background: radial-gradient(closest-side circle,red , blue);<br>farthest-side 最远边<br>background: radial-gradient(farthest-side circle,red , blue);<br>closest-corner最近角<br>background: radial-gradient(closest-corner circle,red , blue);<br>farthest-corner最远角<br>background: radial-gradient(farthest-corner circle,red , blue);</p><p>颜色结点：<br>例：<br>background:radial-gradient(circle,red 50% ,blue 70%);<br>注意：此时的百分比,指的是圆心到元素最远端的距离（角度）</p><p>重复渐变 ：<br>示例： background: repeating-radial-gradient(red 0%,blue 20%);<br>background: repeating-radial-gradient(red 0%,blue 10%,red 20%);</p><h1 id="4-CSS3动画"><a href="#4-CSS3动画" class="headerlink" title="4.CSS3动画"></a><a href="#4-CSS3%E5%8A%A8%E7%94%BB" title="4.CSS3动画"></a>4.CSS3动画</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;CSS3的新特性大致分为以下六类&quot;&gt;&lt;a href=&quot;#CSS3的新特性大致分为以下六类&quot; class=&quot;headerlink&quot; title=&quot;CSS3的新特性大致分为以下六类&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#CSS3%E7%9A%84%E6%96%B0%E7%89</summary>
      
    
    
    
    
  </entry>
  
</feed>
